function XMPPOnStream ( ReceivedXML )
{
	warn( 'RECV: ' + ReceivedXML.xml );

	/* Server supports stream encryption
	 */
	if ( ReceivedXML.documentElement.selectSingleNode( '/stream:features/starttls[@xmlns="urn:ietf:params:xml:ns:xmpp-tls"]' ) )
	{
		var Str = '<starttls xmlns="urn:ietf:params:xml:ns:xmpp-tls"/>';
		warn( 'SENT: ' + Str );
		external.XMPP.SendText( Str );
	}

	/* Server is ready to start stream encryption handshake
	 */
	else if ( ReceivedXML.documentElement.selectSingleNode( '/proceed[@xmlns="urn:ietf:params:xml:ns:xmpp-tls"]' ) )
	{
		external.XMPP.StartTLS();
	}

	/* Error during encryption or authentication
	 */
	else if ( ReceivedXML.documentElement.selectSingleNode( '/failure[@xmlns="urn:ietf:params:xml:ns:xmpp-tls"]'	) ||
			  ReceivedXML.documentElement.selectSingleNode( '/failure[@xmlns="urn:ietf:params:xml:ns:xmpp-sasl"]'	) )
	{
		OnLoginAbort();
	}

	/* Choose a supported authentication mechanism
	 */
	else if ( ReceivedXML.documentElement.selectSingleNode( '/stream:features/mechanisms[@xmlns="urn:ietf:params:xml:ns:xmpp-sasl"]' ) )
	{
		/* Request MD5 challenge
		 */
		if ( ReceivedXML.documentElement.selectSingleNode( '/stream:features/mechanisms[@xmlns="urn:ietf:params:xml:ns:xmpp-sasl"]/mechanism[ . = "DIGEST-MD5" ]' ) )
		{
			var Str = '<auth xmlns="urn:ietf:params:xml:ns:xmpp-sasl" mechanism="DIGEST-MD5"/>';
			warn( 'SENT: ' + Str );
			external.XMPP.SendText( Str );
		}
		/* Send plaintext credentials
		 */
		else if ( ReceivedXML.documentElement.selectSingleNode( '/stream:features/mechanisms[@xmlns="urn:ietf:params:xml:ns:xmpp-sasl"]/mechanism[ . = "PLAIN" ]' ) )
		{
			var User = external.globals( 'cfg' )( 'username' );
			var Addr = User + '@' + external.globals( 'cfg' )( 'server' );
			var Pass = external.globals( 'cfg' )( 'password' );

			/* Plaintext algorithm:
			 * Base64( UTF8( Addr ) + 0x00 + UTF8( User ) + 0x00 + UTF8( Pass ) )
			 */
			var Data = external.SASLPlain( Addr, User, Pass );

			var dom = new ActiveXObject( 'Msxml2.DOMDocument' );
			dom.loadXML( '<auth xmlns="urn:ietf:params:xml:ns:xmpp-sasl" mechanism="PLAIN"/>' );
			dom.documentElement.text = Data;
			warn( 'SENT: ' + dom.xml );
			external.XMPP.SendXML( dom );
		}
		/* Unsupported authentication mechanisms
		 */
		else
		{
			var Str = '<abort xmlns="urn:ietf:params:xml:ns:xmpp-sasl"/>';
			warn( 'SENT: ' + Str );
			external.XMPP.SendText( Str );
			OnLoginAbort();
		}
	}

	/* Decode authentication challenge and answer with correct credentials
	 */
	else if ( ReceivedXML.documentElement.selectSingleNode( '/challenge[@xmlns="urn:ietf:params:xml:ns:xmpp-sasl"]' ) )
	{
		var Encoded	= ReceivedXML.documentElement.selectSingleNode( '/challenge[@xmlns="urn:ietf:params:xml:ns:xmpp-sasl"]' ).text;
		var Pairs	= external.Base64ToString( Encoded ).replace( /\\\n/gm, '' ).split( ',' );
		var Dataset	= new ActiveXObject( 'Scripting.Dictionary' );

		warn( 'SASL: ' + Pairs );

		for ( var i = 0; i < Pairs.length; ++i )
		{
			if ( Pairs[i].indexOf( '=' ) > 0 )
			{
				var Name	= Pairs[i].substr( 0, Pairs[i].indexOf( '=' ) );
				var Value	= Pairs[i].substr( Pairs[i].indexOf( '=' ) + 1 );

				if ( Value.charAt( 0 ) == '"' && Value.charAt( Value.length - 1 ) == '"' )
					Value	= Value.substr( 1, Value.length - 2 );

				if ( Dataset.Exists( Name ) )
					Dataset( Name ).push( Value );
				else
					Dataset.Add( Name, [ Value ] );
			}
		}

		/* Successful authentication
		 */
		if ( Dataset.Exists( 'rspauth' ) && Dataset.Count == 1 )
		{
			var Str = '<response xmlns="urn:ietf:params:xml:ns:xmpp-sasl"/>';
			warn( 'SENT: ' + Str );
			external.XMPP.SendText( Str );
		}

		/* Solve the MD5 challenge
		 */
		else if ( Dataset.Exists( 'algorithm' ) && Dataset( 'algorithm' )[0].toLowerCase() == 'md5-sess' && Dataset.Exists( 'nonce' ) && Dataset.Exists( 'qop' ) )
		{
			var Response = new ActiveXObject( 'Scripting.Dictionary' );

			Response.Add( 'username',	external.globals( 'cfg' )( 'username' ) );
			Response.Add( 'realm',		Dataset.Exists( 'realm' ) ? Dataset( 'realm' )[0] : '' );
			Response.Add( 'nonce',		Dataset( 'nonce' )[0] );
			Response.Add( 'cnonce',		external.StringToSHA1( Math.random().toString() ) );
			Response.Add( 'nc',			'00000001' );
			Response.Add( 'serv-type',	'xmpp' );
			Response.Add( 'host',		external.globals( 'cfg' )( 'server' ) );
			Response.Add( 'digest-uri',	'xmpp/' + Response( 'host' ) );
			Response.Add( 'charset',	'utf-8' );
//			Response.Add( 'authzid',	Response( 'username' ) + '@' + Response( 'host' ) );
			Response.Add( 'qop',		Dataset( 'qop' )[0] );
			Response.Add( 'password',	external.globals( 'cfg' )( 'password' ) );

			/* MD5-Session algorithm:
			var md5	= new MD5();
			var X	= Response( 'username' ) + ':' + Response( 'realm' ) + ':' + Response( 'password' );
			var Y	= md5.digest( X ); // This should be binary data instead of the hexadecimal string
			var A1	= Y + ':' + Response( 'nonce' ) + ':' + Response( 'cnonce' ); // + ':' + Response( 'authzid' )
			var A2	= 'AUTHENTICATE:' + Response( 'digest-uri' );
			var HA1	= md5.digest( A1 );
			var HA2	= md5.digest( A2 );
			var KD	= HA1 + ':' + Response( 'nonce' ) + ':' + Response( 'nc' ) + ':' + Response( 'cnonce' ) + ':' + Response( 'qop' ) + ':' + HA2;
			var Z	= md5.digest( KD );
			*/

			var Z = external.SASLDigest(
				Response( 'username'	),
				Response( 'realm'		),
				Response( 'password'	),
				Response( 'nonce'		),
				Response( 'cnonce'		),
				Response( 'digest-uri'	),
				Response( 'nc'			),
				Response( 'qop'			)
			);

			Response.Add( 'response', Z );

			var Output =	'username="'	+ Response( 'username'		) + '",' +
							'realm="'		+ Response( 'realm'			) + '",' +
							'nonce="'		+ Response( 'nonce'			) + '",' +
							'cnonce="'		+ Response( 'cnonce'		) + '",' +
							'nc='			+ Response( 'nc'			) + ','  +
							'qop='			+ Response( 'qop'			) + ','  +
							'digest-uri="'	+ Response( 'digest-uri'	) + '",' +
							'charset='		+ Response( 'charset'		) + ','  +
//							'authzid="'		+ Response( 'authzid'		) + '",' +
							'response='		+ Response( 'response'		);

			var dom = new ActiveXObject( 'Msxml2.DOMDocument' );
			dom.loadXML( '<response xmlns="urn:ietf:params:xml:ns:xmpp-sasl"/>' );
			var ResponseBase64 = external.StringToBase64( Output );
			var ResponseChopped = [];
			for ( var i = 0; i <= ResponseBase64.length; i += 76 )
				ResponseChopped.push( ResponseBase64.substr( i, 76 ) );
			ResponseBase64 = ResponseChopped.join( '\n' );
			while ( ResponseBase64.length % 3 )
				ResponseBase64 += '=';
			dom.documentElement.text = ResponseBase64;
			warn( 'SENT: ' + dom.xml );
			external.XMPP.SendXML( dom );

			warn( 'SASL: ' + Output );
		}

		/* Return an error message and abort the connection
		 */
		else
		{
			var Str = '<abort xmlns="urn:ietf:params:xml:ns:xmpp-sasl"/>';
			warn( 'SENT: ' + Str );
			external.XMPP.SendText( Str );
			OnLoginAbort();
		}
	}

	/* Re-initialise the stream
	 */
	else if ( ReceivedXML.documentElement.selectSingleNode( '/success[@xmlns="urn:ietf:params:xml:ns:xmpp-sasl"]' ) )
	{
		XMPPOnConnected();
	}

	/* Bind a resource to the stream
	 */
	else if ( ReceivedXML.documentElement.selectSingleNode( '/stream:features/bind[@xmlns="urn:ietf:params:xml:ns:xmpp-bind"]' ) )
	{
		var hook		= new XMPPHookIQ();
		hook.Window		= external.wnd;
		hook.Callback	= 'OnLoginBind';

		var dom = new ActiveXObject( 'Msxml2.DOMDocument' );
		dom.loadXML( '<iq type="set"><bind xmlns="urn:ietf:params:xml:ns:xmpp-bind"><resource/></bind></iq>' );
		dom.documentElement.setAttribute( 'id', hook.Id );
		dom.documentElement.firstChild.firstChild.text = external.globals( 'cfg' )( 'resource' );
		warn( 'SENT: ' + dom.xml );
		external.XMPP.SendXML( dom );
	}

	/* Use old protocol to log in
	 */
	else if ( ( ReceivedXML.documentElement.tagName == 'stream:features' && ! ReceivedXML.documentElement.childNodes.length ) ||
				ReceivedXML.documentElement.selectSingleNode( '/stream:features/auth[@xmlns="http://jabber.org/features/iq-auth"]' )
	)
	{
		var hook		= new XMPPHookIQ();
		hook.Window		= external.wnd;
		hook.Callback	= 'OnLoginAuthSend';

		var dom = new ActiveXObject( 'Msxml2.DOMDocument' );
		dom.loadXML( '<iq type="get"><query xmlns="jabber:iq:auth"><username/></query></iq>' );
		dom.documentElement.firstChild.firstChild.text = external.globals( 'cfg' )( 'username' );
		dom.documentElement.setAttribute( 'to', external.globals( 'cfg' )( 'server' ) );
		dom.documentElement.setAttribute( 'id', hook.Id );
		warn( 'SENT: ' + dom.xml );
		external.XMPP.SendXML( dom );
	}

	/* Generate a different resource and auto-reconnect
	 */
	else if ( ReceivedXML.documentElement.selectSingleNode( '/stream:conflict[@xmlns="urn:ietf:params:xml:ns:xmpp-streams"]' ) )
	{
		external.globals( 'cfg' )( 'resource' ) = external.globals( 'cfg' )( 'resource' ) + ' (' + Math.round( Math.random() * 0xffff ) + ')';
		external.XMPP.Disconnect();
	}

	/* Something has gone wrong, do not attempt to reconnect automatically
	 */
	else if ( ReceivedXML.documentElement.selectSingleNode( '/stream:error' ) )
	{
		external.globals( 'XMPPReconnect' ) = false;
	}
}
